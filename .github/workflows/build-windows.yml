name: Build Windows

on:
  push:
    branches:
      - 'lord'
    paths-ignore:
      - 'LICENSE'
      - 'README.md'
      - '.gitignore'
  pull_request:
    branches:
      - 'lord'
    paths-ignore:
      - 'LICENSE'
      - 'README.md'
      - '.gitignore'

env:
  ENV_EXAMPLE_FILE: .env.example
  PACKAGE_FILE: package.json

jobs:
  release:
    permissions: write-all
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2022]
        node-version: [14.x]

    env:
      ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
      ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
      ADS_URLS: ${{ secrets.ADS_URLS }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      YANDEX_TRACKING_ID: ${{ secrets.YANDEX_TRACKING_ID }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install jq
        run: choco install jq
      - name: Check jq version
        run: jq --version

      - name: patch node gyp on windows to support Visual Studio 2019
        shell: powershell
        run: |
          npm install --global node-gyp@latest
          npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache Electron
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/.cache/electron
          key: ${{ runner.os }}-electron-cache-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Cache Electron-Builder
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/.cache/electron-builder
          key: ${{ runner.os }}-electron-builder-cache-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-cache-

      - name: Load variables into the .env file
        shell: bash
        run: |
          source ${{env.ENV_EXAMPLE_FILE}}

          SENTRY_DSN="${{env.SENTRY_DSN}}"
          YANDEX_TRACKING_ID="${{env.YANDEX_TRACKING_ID}}"
          ADS_URLS="${{env.ADS_URLS}}"
          
          echo "SENTRY_DSN=$SENTRY_DSN" >> .env
          echo "YANDEX_TRACKING_ID=$YANDEX_TRACKING_ID" >> .env
          echo "ADS_URLS=$ADS_URLS" >> .env
          echo "VK_APP_ID=$VK_APP_ID" >> .env
          echo "API_ENDPOINT_URL=$API_ENDPOINT_URL" >> .env
          echo "STATIC_ENDPOINT_URL=$STATIC_ENDPOINT_URL" >> .env
          echo "EXT_API_SERVER=$EXT_API_SERVER" >> .env
          echo "DISCORD_CLIENT_ID=$DISCORD_CLIENT_ID" >> .env
      
      - name: Get the application version from the "package.json" file
        shell: bash
        run: echo "APP_VERSION=$(cat ${{env.PACKAGE_FILE}} | jq -r '.version')" >> $GITHUB_ENV

      - name: Install dependencies
        run: yarn

      - name: Run build
        run: npm run release:windows

      - name: Archive results
        uses: actions/upload-artifact@v3
        with:
          name: Save artifacts
          path: |
            release/*.exe
            release/win-arm64-unpacked
            release/win-unpacked
            release/win-ia32-unpacked

      - name: Archiving binary files
        shell: powershell
        run: |
          Compress-Archive -Path "release\win-arm64-unpacked" -DestinationPath "win-arm64-unpacked.zip"
          Compress-Archive -Path "release\win-unpacked" -DestinationPath "win-unpacked.zip"
          Compress-Archive -Path "release\win-ia32-unpacked" -DestinationPath "win-ia32-unpacked.zip"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{env.APP_VERSION}}
          files: |
            release/*.exe
            release/win-arm64-unpacked.zip
            release/win-unpacked.zip
            release/win-ia32-unpacked.zip