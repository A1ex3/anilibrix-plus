name: Build Linux

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'LICENSE'
      - 'README.md'
      - '.gitignore'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - 'LICENSE'
      - 'README.md'
      - '.gitignore'

env:
  ENV_EXAMPLE_FILE: .env.example
  PACKAGE_FILE: package.json
  CHANGELOG_FILE: changelog.txt
  BUILD_DIR_TEMP: build_temp

jobs:
  release:
    permissions: write-all
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]

    env:
      ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
      ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Go 1.21.x
        uses: actions/setup-go@v4
        with:
            go-version: '1.21.x'

      - name: Install jq
        run: sudo apt-get install jq -y
      - name: Check jq version
        run: jq --version

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Node.js modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install multilib
        run: sudo apt-get -y install gcc-multilib g++-multilib

      - name: Cache Electron
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/.cache/electron
          key: ${{ runner.os }}-electron-cache-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-electron-cache-

      - name: Cache Electron-Builder
        uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/.cache/electron-builder
          key: ${{ runner.os }}-electron-builder-cache-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-cache-

      - name: Load variables into the .env file
        shell: bash
        run: |
          source ${{env.ENV_EXAMPLE_FILE}}

          SENTRY_DSN="${{ secrets.SENTRY_DSN }}"
          YANDEX_TRACKING_ID="${{ secrets.YANDEX_TRACKING_ID }}"
          ADS_URLS="${{ secrets.ADS_URLS }}"

          echo "SENTRY_DSN=$SENTRY_DSN" >> .env
          echo "YANDEX_TRACKING_ID=$YANDEX_TRACKING_ID" >> .env
          echo "ADS_URLS=$ADS_URLS" >> .env
          echo "VK_APP_ID=$VK_APP_ID" >> .env
          echo "API_ENDPOINT_URL=$API_ENDPOINT_URL" >> .env
          echo "STATIC_ENDPOINT_URL=$STATIC_ENDPOINT_URL" >> .env
          echo "EXT_API_SERVER=$EXT_API_SERVER" >> .env
          echo "DISCORD_CLIENT_ID=$DISCORD_CLIENT_ID" >> .env
          echo "APP_UPDATE_CHANNEL_ENDPOINT_URL=$APP_UPDATE_CHANNEL_ENDPOINT_URL" >> .env
      
      - name: Get the application version from the "package.json" file
        shell: bash
        run: echo "APP_VERSION=$(cat ${{env.PACKAGE_FILE}} | jq -r '.version')" >> $GITHUB_ENV

      - name: Get Change log
        shell: bash
        run: |
          sudo chmod +x .ci/get_changelog.sh
          ./.ci/get_changelog.sh ${{env.CHANGELOG_FILE}} ${{env.APP_VERSION}} > ${{ env.CHANGELOG_FILE }}.tmp
          cat ${{ env.CHANGELOG_FILE }}.tmp

      - name: Install dependencies
        run: yarn

      - name: Run build
        shell: bash
        run: |
          mkdir -p ${{env.BUILD_DIR_TEMP}}

          updater_path=updater/build/updater
          sed -i 's/"from": "path\/to\/updater_file"/"from": "updater\/build\/updater"/g' ${{env.PACKAGE_FILE}}

          cd updater && make build-amd64 && cd ..
          hash=$(sha512sum $updater_path | cut -d ' ' -f 1)
          sed -i "s/\"updater_hash_sha512\": \"\",/\"updater_hash_sha512\": \"$hash\",/" ${{env.PACKAGE_FILE}}
          npm run release:linux
          mv release/*-linux-amd64-*.snap ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-x86_64-*.AppImage ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-amd64-*.deb ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-x86_64-*.flatpak ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-x86_64-*.rpm ${{env.BUILD_DIR_TEMP}}/
          mv release/linux-unpacked ${{env.BUILD_DIR_TEMP}}/

          cd updater && make build-arm64 && cd ..
          hash=$(sha512sum $updater_path | cut -d ' ' -f 1)
          sed -i "s/\"updater_hash_sha512\": \"\",/\"updater_hash_sha512\": \"$hash\",/" ${{env.PACKAGE_FILE}}
          npm run release:linux
          mv release/*-linux-arm64-*.AppImage ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-arm64-*.deb ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-aarch64-*.rpm ${{env.BUILD_DIR_TEMP}}/
          mv release/linux-arm64-unpacked ${{env.BUILD_DIR_TEMP}}/

          rm -rf $updater_path
          sed -i 's/"updater_hash_sha512": "[^"]*",/"updater_hash_sha512": "",/' ${{env.PACKAGE_FILE}}
          npm run release:linux
          mv release/*-linux-i386-*.AppImage ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-i386-*.deb ${{env.BUILD_DIR_TEMP}}/
          mv release/*-linux-i686-*.rpm ${{env.BUILD_DIR_TEMP}}/
          mv release/linux-ia32-unpacked ${{env.BUILD_DIR_TEMP}}/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Save artifacts
          path: ${{env.BUILD_DIR_TEMP}}/*

      - name: Archiving binary files
        run: |
          cd ${{env.BUILD_DIR_TEMP}}
          zip -r linux-arm64-unpacked.zip linux-arm64-unpacked
          zip -r linux-unpacked.zip linux-unpacked
          zip -r linux-ia32-unpacked.zip linux-ia32-unpacked

          rm -rf linux-arm64-unpacked linux-unpacked linux-ia32-unpacked

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          body_path: ${{ env.CHANGELOG_FILE }}.tmp
          tag_name: ${{env.APP_VERSION}}
          files: ${{env.BUILD_DIR_TEMP}}/*